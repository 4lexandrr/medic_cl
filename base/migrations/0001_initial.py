# Generated by Django 4.1.1 on 2022-10-01 07:45

import base.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Events",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("event_date", models.DateTimeField()),
                ("description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("post", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Type_of_diagnoses",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=120)),
                ("address", models.CharField(max_length=300)),
                ("zip_code", models.CharField(max_length=10)),
                ("phone", models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name="Visits",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("visit_date", models.DateTimeField()),
                ("description", models.TextField(blank=True)),
                (
                    "name",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.events",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="events",
            name="venue",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.venue",
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("USER", "User"),
                            ("DOCTOR", "Doctor"),
                            ("ADMIN", "Admin"),
                        ],
                        default="USER",
                        max_length=255,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, default="Test", max_length=255),
                ),
                ("middle_name", models.CharField(default="Test", max_length=50)),
                ("second_name", models.CharField(default="Test", max_length=50)),
                (
                    "years",
                    models.PositiveIntegerField(
                        default=2022,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            base.models.max_value_current_year,
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(default="Test", max_length=254, unique=True),
                ),
                ("polis", models.CharField(default="Test", max_length=16)),
                (
                    "mobile_phone",
                    models.CharField(
                        default="Test",
                        max_length=18,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numeric characters are allowed."
                            ),
                            django.core.validators.MaxLengthValidator,
                        ],
                    ),
                ),
                (
                    "registration_address",
                    models.CharField(default="Test", max_length=200),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[],
            options={"proxy": True, "indexes": [], "constraints": [],},
            bases=("base.user",),
        ),
        migrations.CreateModel(
            name="Client",
            fields=[],
            options={"proxy": True, "indexes": [], "constraints": [],},
            bases=("base.user",),
        ),
        migrations.CreateModel(
            name="Doctor",
            fields=[],
            options={"proxy": True, "indexes": [], "constraints": [],},
            bases=("base.user",),
        ),
    ]
